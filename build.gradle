apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'jacoco'

group "com.jscisco.lom"
version "0.0.1"


buildscript {
    ext.kotlinVersion = "1.3.11"
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0'
    }
}

configurations.all {
    exclude group: "org.slf4j", module: "slf4j-simple"
}

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"


    compile "org.slf4j:slf4j-api:$slf4jVersion"

    compile "org.hexworks.zircon:zircon.core-jvm:$zirconVersion"
    compile "org.hexworks.zircon:zircon.jvm.swing:$zirconVersion"

    compile "org.hexworks.cobalt:cobalt.logging:$cobaltVersion"

    compile "org.hexworks.amethyst:amethyst.core-jvm:$amethystVersion"

    compile "com.squidpony:squidlib-util:$squidLibVersion"

    testCompile "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testCompile "org.junit.jupiter:junit-jupiter-params:$junitVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testCompile "org.assertj:assertj-core:$assertjVersion"

    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
    main.resources.srcDirs += 'src/main/resources'
    test.java.srcDirs += 'src/test/kotlin'
}

jar {
    manifest {
        attributes 'Main-Class': 'com.jscisco.lom.MainKt'
    }
    baseName = project.name + '-all'
    // This line recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task to skip files or types
    // at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

jacoco {
    toolVersion = '0.8.2'
    reportsDir = file("$buildDir/reports")
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage report."
    classDirectories = fileTree(
            dir: "$buildDir/classes/kotlin/main"
    )
    def coverageSourceDirs = [
            "src/main/kotlin"
    ]
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/jacoco/jacoco.exec")
    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
    }

}

test {
    useJUnitPlatform()
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/test.exec")
        includeNoLocationClasses = true
    }
    finalizedBy(jacocoTestReport)
}

mainClassName = 'com.jscisco.lom.MainKt'

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

tasks.withType(Test) {
    testLogging {
        showStandardStreams(true)
        events("passed", "skipped", "failed")
    }
}